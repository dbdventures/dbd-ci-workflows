name: Backend Workflow

on:
  workflow_call:
    inputs:
      wf_event:
        type: string
        default: 'PR'
      JAVA_VERSION:
        type: string
        default: "17.0.1"
      GITHUB_ORG:
        type: string
        required: true
      REMOTE_REPOSITORY:
        type: string
        required: true
      REMOTE_BRANCH:
        type: string
        default: "main"
      HELM_REPOSITORY_NAME:
        type: string
        required: true
      HELM_REPOSITORY_URL:
        type: string
        required: true
      HELM_CHART:
        type: string
        required: true
      HELM_VALUES:
        type: string
        required: true
      HELM_NAMESPACE:
        type: string
        required: true
      HELM_ROLLOUT_TIMEOUT:
        default: "500s"
        type: string
      DBD_DOCKER_REGISTRY:
        type: string
        required: true
      DBD_DOCKER_IMAGE_TAG:
        type: string
        required: true
      DBD_QOVERY_CONTAINER_ID:
        type: string
        required: true
    secrets:
      DBD_ARTIFACTORY_URL:
        required: true
      DBD_ARTIFACTORY_USER:
        required: true
      DBD_ARTIFACTORY_PASSWORD:
        required: true
      SONAR_TOKEN:
        required: true
      HELM_REPOSITORY_USERNAME:
        required: true
      HELM_REPOSITORY_PASSWORD:
        required: true
      ACTIONS_SSH_KEY:
        required: true
      DBD_ECR_AWS_ACCESS_KEY_ID:
        required: true
      DBD_ECR_AWS_SECRET_ACCESS_KEY:
        required: true
      DBD_QOVERY_API_ACCESS_TOKEN:
        required: true
jobs:
  test:
    name: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.JAVA_VERSION }}
          distribution: 'zulu'

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      - name: Run Tests
        env:
          DBD_ARTIFACTORY_USER: ${{ secrets.DBD_ARTIFACTORY_USER }}
          DBD_ARTIFACTORY_PASSWORD: ${{ secrets.DBD_ARTIFACTORY_PASSWORD }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew test

      - name: Report Tests
        uses: dorny/test-reporter@v1.6.0
        if: success() || failure()
        with:
          name: Tests
          path: '**/build/test-results/test/TEST-*.xml'
          reporter: java-junit
          list-suites: 'failed'
          fail-on-error: true

      - name: Analyze Code
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ "${{ inputs.wf_event }}" == "pull_request" ]; then
            ./gradlew sonarqube -Dsonar.scm.revision=${{ github.sha }} -Dsonar.pullrequest.base=${{ github.base_ref }} -Dsonar.pullrequest.branch=${{ github.ref }} -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} -Dsonar.pullrequest.provider=GitHub -Dsonar.pullrequest.github.repository=${{ github.repository }}
          else
            ./gradlew sonarqube
          fi

  build:
    if: contains(github.ref,'main')
    name: build
    runs-on: ubuntu-latest
    needs: [ "test"]

    steps:
      - uses: actions/checkout@v3

      - name: Get commit version
        id: commit
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.JAVA_VERSION }}
          distribution: 'zulu'

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DBD_ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DBD_ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: build
        env:
          DBD_ARTIFACTORY_URL: ${{ secrets.DBD_ARTIFACTORY_URL }}
          DBD_ARTIFACTORY_USER: ${{ secrets.DBD_ARTIFACTORY_USER }}
          DBD_ARTIFACTORY_PASSWORD: ${{ secrets.DBD_ARTIFACTORY_PASSWORD }}
          DBD_DOCKER_REGISTRY: ${{ inputs.DBD_DOCKER_REGISTRY }}
          DBD_DOCKER_IMAGE_TAG: ${{ inputs.DBD_DOCKER_IMAGE_TAG }}
        run: |
          echo $DBD_DOCKER_IMAGE_TAG
          aws ecr get-login-password | docker login --username AWS --password-stdin ${DBD_DOCKER_REGISTRY}
          ./gradlew dockerTagsPush
    outputs:
      commit: ${{ steps.commit.outputs.sha_short }}

  publish-artifacts:
    if: contains(github.ref,'main')
    name: Publish Artifacts
    runs-on: ubuntu-latest
    needs: [ "build"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.JAVA_VERSION }}
          distribution: 'zulu'

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      - name: publish
        env:
          DBD_ARTIFACTORY_USER: ${{ secrets.DBD_ARTIFACTORY_USER }}
          DBD_ARTIFACTORY_PASSWORD: ${{ secrets.DBD_ARTIFACTORY_PASSWORD }}
        run: ./gradlew artifactoryPublish
  deploy:
    if: contains(github.ref,'main')
    name: deploy
    runs-on: ubuntu-latest
    needs: [ "build"]

    steps:
      - name: Add SHORT_SHA env property with commit short sha
        id: get-sha
        run: echo "SHORT_SHA=`echo ${{github.sha}} | cut -c1-8`" >> $GITHUB_OUTPUT
      - name: Deploy with Qovery
        uses: nick-fields/retry@v2
        env:
          QOVERY_CLI_ACCESS_TOKEN: ${{ secrets.QOVERY_CLI_ACCESS_TOKEN }}
          DBD_QOVERY_APPLICATION_NAME: ${{ inputs.DBD_QOVERY_APPLICATION_NAME }}
        with:
          max_attempts: 3
          timeout_minutes: 3
          retry_on: error
          retry_wait_seconds: 120
          command: |
            # Download and install Qovery CLI
            sudo curl -s https://get.qovery.com | bash          
            qovery container deploy \
              --organization 'DBD Ventures LLC' \
              --project 'DBD DEV Platform' \
              --environment 'qa2' \
              --container $DBD_QOVERY_APPLICATION_NAME \
              --tag ${{ steps.get-sha.outputs.SHORT_SHA }}                
  
  

  #deploy:
  #  if: contains(github.ref,'main')
  #  name: deploy
  #  runs-on: demo-runner
  #  needs: [ "build"]
#
  #  steps:
  #    - uses: actions/checkout@v2
  #      with:
  #        repository: '${{ inputs.GITHUB_ORG }}/${{ inputs.REMOTE_REPOSITORY }}'
  #        path: ${{ inputs.REMOTE_REPOSITORY }}
  #        ref: ${{ inputs.REMOTE_BRANCH }}
  #        ssh-key: '${{ secrets.ACTIONS_SSH_KEY }}'
#
   #   - name: Install prerequisites
   #     run: |
   #        curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.25.0/bin/linux/amd64/kubectl && chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/
   #        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && chmod 700 get_helm.sh && ./get_helm.sh
   #        kubectl version --client
 #          helm version
#
   #   - name: 'Helm Registry Login'
   #     run: |
   #       helm repo add ${{ inputs.HELM_REPOSITORY_NAME }} ${{ inputs.HELM_REPOSITORY_URL }} --username ${{ secrets.HELM_REPOSITORY_USERNAME }} --password ${{ secrets.HELM_REPOSITORY_PASSWORD }}
   #       helm repo update
#
   #   - name: 'Helm Release'
 #       env:
    #      GITHUB_SHA: ${{ needs.build.outputs.commit }}
    #    run: |
    #      helm -n ${{ inputs.HELM_NAMESPACE }} upgrade --install ${{ github.event.repository.name }} -f ${{ inputs.REMOTE_REPOSITORY }}/${{ inputs.HELM_VALUES }} --set-string podLabels.git-sha=${GITHUB_SHA} --wait "--timeout=${{ inputs.HELM_ROLLOUT_TIMEOUT }}" ${{ inputs.HELM_CHART }}


